

    create table idiom_type(
    id int primary key AUTO_INCREMENT,
    name varchar(50) not null,
    description varchar(200) not null,
    activo char(1) not null  
    );

    create table phrasal_verb_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table  hard_listening_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table vocabulary_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table question_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table grammar_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table story_type (
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table idiomatic_expression_type (
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table daily_routine_type(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table hard_listening(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    id_hard_listening_type int references hard_listenging_type(id),
    active char(1)
    );

    create table idiom(
    id int primary key AUTO_INCREMENT,   
    name varchar(100) not null,
    description varchar(200) not null,
    id_idiom int references idiom_type(id),
    active char(1) not null
    );

    create table phrasal_Verb(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    id_phrasal_verb_type int references phrasal_verb_type(id)
    );

    create table vocabulary (
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    id_vocabulary_type int references vocabulary_type(id),
    active char(1)
    );

    create table question(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    id_question_type int references question_type(id),
    active char(1)
    );

    create table grammar(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(500) not null,
    id_grammar_type int references grammar_type(id),
    active char(1)
    );

    create table story(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar (5000) not null,
    id_story_type int references story_type(id),
        
    active char(1)
    );

create table daily_routine(
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(200) not null,
    active char(1)
    );

    create table idiomatic_expression (
    id int primary key AUTO_INCREMENT,   
    name varchar(50) not null,
    description varchar(500) not null,
    id_idiom int references idiom(id),
    id_grammar int references grammar(id),
    id_phrasal_verb int references phrasal_verb(id),
    id_vocabulary int references vocabulary(id),
    id_daily_routine int references daily_routine(id),
    active char(1)
    );

    create table english_user(
    id int primary key auto_increment,
    name varchar(50) not null,
    user varchar(50) not null,
    active char(1)
    );

    create table permission(
    id int primary key auto_increment,
    name varchar(50) not null,
    active char(1)
    );



    The max length of a varchar is subject to the max row size in MySQL, which is 64KB (not counting BLOBs):

    VARCHAR(65535) However, note that the limit is lower if you use a multi-byte character set:

    VARCHAR(21844) CHARACTER SET utf8

    


    MyISAM is designed with the idea that your database is queried far more than its
    updated and as a result it performs very fast read operations. If your read to 
    write(insert|update) ratio is less than 15% its better to use MyISAM.



    InnoDB uses row level locking, has commit, rollback, and crash-recovery capabilities to protect user data. It supports transaction and fault tolerance
    MyISAM:

    The MyISAM storage engine in MySQL.

    Simpler to design and create, thus better for beginners. No worries about the foreign relationships between tables.
    Faster than InnoDB on the whole as a result of the simpler structure thus much less costs of server resources. -- Mostly no longer true.
    Full-text indexing. -- InnoDB has it now
    Especially good for read-intensive (select) tables. -- Mostly no longer true.
    Disk footprint is 2x-3x less than InnoDB's. -- As of Version 5.7, this is perhaps the only real advantage of MyISAM.
    InnoDB:

    The InnoDB storage engine in MySQL.

    Support for transactions (giving you support for the ACID property).
    Row-level locking. Having a more fine grained locking-mechanism gives you higher concurrency compared to, for instance, MyISAM.
    Foreign key constraints. Allowing you to let the database ensure the integrity of the state of the database, and the relationships between tables.
    InnoDB is more resistant to table corruption than MyISAM.
    Support for large buffer pool for both data and indexes. MyISAM key buffer is only for indexes.
    MyISAM is stagnant; all future enhancements will be in InnoDB. This was made abundantly clear with the roll out of Version 8.0.
    MyISAM Limitations:

    No foreign keys and cascading deletes/updates
    No transactional integrity (ACID compliance)
    No rollback abilities
    4,284,867,296 row limit (2^32) -- This is old default. The configurable limit (for many versions) has been 2**56 bytes.
    Maximum of 64 indexes per table
    InnoDB Limitations:

    No full text indexing (Below-5.6 mysql version)
    Cannot be compressed for fast, read-only (5.5.14 introduced ROW_FORMAT=COMPRESSED)
